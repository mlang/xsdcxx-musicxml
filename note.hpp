// Copyright (c) 2005-2014 Code Synthesis Tools CC
// Copyright (c) 2014 Mario Lang
//
// This program was originally generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.  It was later modified by hand.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.

//------------------------------------------------------------------------------
// This header should NOT be included directly in your program.
// See the musicxml.hpp header file instead.
//------------------------------------------------------------------------------

namespace musicxml {
class note : public note_base {
public:
  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  note(const pitch_type &, const duration_type &);
  note(const unpitched_type &, const duration_type &);
  note(const rest_type &, const duration_type &);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  note(const ::xercesc::DOMElement &e, ::xml_schema::flags f = 0,
       ::xml_schema::container *c = nullptr);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  note(const note &x, ::xml_schema::flags f = 0,
       ::xml_schema::container *c = nullptr);

  using note_base::grace;

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void grace (const grace_type& x);

  /**
   * @brief Set the element value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy
   * of this value and sets it as the new value of the element.
   * Otherwise the element container is set the 'not present' state.
   */
  void grace (const grace_optional& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void grace (::std::unique_ptr< grace_type > p);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual note *_clone(::xml_schema::flags f = 0,
                       ::xml_schema::container *c = nullptr) const override;
};

void operator<<(::xercesc::DOMElement &e, const note &i);
}
